var fname = function(){
    return true;
}

var fname = function named(){
    return true;
}

function fname(){
    return true;
}

const fname = ()=>{

}

var obj={
    fname:function(){
        return true;
    }
}

// function declarations 
(function A(){})// when a function expression is not appropriate or when it is important that that a function is hoisted.

// function declaration generators
 (function* B(){}) //when  want to exit and then re-enter a function.

// anonymous function expressions
//  (var C = function(){})// when  want to pass a function as an argument to another function or I want to form a closure.

// // function expression generators
//  (var D = function* [name](){};)// when  want to exit and then re-enter a nested function.

// // arrow function expressions
//  (() => {};)// when  want to lexically bind the 'this' value.

// // named function expressions
//  (var E = function F(){};) //when  am doing recursion or want to see the function name in the debugger.

// // immediately-invoked function expressions
//  (var F = (function(){return function(){}})();) //when  want to use the module pattern.